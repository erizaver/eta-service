// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EtaServiceClient is the client API for EtaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EtaServiceClient interface {
	GetNearestCarEtaV1(ctx context.Context, in *GetNearestCarEtaV1Request, opts ...grpc.CallOption) (*GetNearestCarEtaV1Response, error)
}

type etaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEtaServiceClient(cc grpc.ClientConnInterface) EtaServiceClient {
	return &etaServiceClient{cc}
}

func (c *etaServiceClient) GetNearestCarEtaV1(ctx context.Context, in *GetNearestCarEtaV1Request, opts ...grpc.CallOption) (*GetNearestCarEtaV1Response, error) {
	out := new(GetNearestCarEtaV1Response)
	err := c.cc.Invoke(ctx, "/eta_service.EtaService/GetNearestCarEtaV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EtaServiceServer is the server API for EtaService service.
// All implementations must embed UnimplementedEtaServiceServer
// for forward compatibility
type EtaServiceServer interface {
	GetNearestCarEtaV1(context.Context, *GetNearestCarEtaV1Request) (*GetNearestCarEtaV1Response, error)
	mustEmbedUnimplementedEtaServiceServer()
}

// UnimplementedEtaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEtaServiceServer struct {
}

func (UnimplementedEtaServiceServer) GetNearestCarEtaV1(context.Context, *GetNearestCarEtaV1Request) (*GetNearestCarEtaV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNearestCarEtaV1 not implemented")
}
func (UnimplementedEtaServiceServer) mustEmbedUnimplementedEtaServiceServer() {}

// UnsafeEtaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EtaServiceServer will
// result in compilation errors.
type UnsafeEtaServiceServer interface {
	mustEmbedUnimplementedEtaServiceServer()
}

func RegisterEtaServiceServer(s grpc.ServiceRegistrar, srv EtaServiceServer) {
	s.RegisterService(&EtaService_ServiceDesc, srv)
}

func _EtaService_GetNearestCarEtaV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNearestCarEtaV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EtaServiceServer).GetNearestCarEtaV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eta_service.EtaService/GetNearestCarEtaV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EtaServiceServer).GetNearestCarEtaV1(ctx, req.(*GetNearestCarEtaV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// EtaService_ServiceDesc is the grpc.ServiceDesc for EtaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EtaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eta_service.EtaService",
	HandlerType: (*EtaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNearestCarEtaV1",
			Handler:    _EtaService_GetNearestCarEtaV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/eta-service.proto",
}
